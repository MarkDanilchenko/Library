# Generated by Django 4.2.6 on 2023-10-22 17:47

import Library__main.models
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Book',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Enter the title of the book.', max_length=100, validators=[Library__main.models.bookNameValidator], verbose_name='Book title')),
                ('description', models.TextField(blank=True, help_text='Enter the description of the book.', verbose_name='Book description')),
                ('author', models.CharField(help_text='Enter the author of the book.', max_length=100, validators=[Library__main.models.nameValidator], verbose_name='Book author')),
                ('year_published', models.IntegerField(help_text='Enter the year of publication of the book.', validators=[django.core.validators.MinValueValidator(1900), django.core.validators.MaxValueValidator(2023)], verbose_name='Year of publication')),
                ('genre', models.CharField(choices=[('Classic', 'Classic'), ('Fantastic', 'Fantastic'), ('Detective', 'Detective'), ('Fairy tales', 'Fairy tales'), ('Horror', 'Horror'), ('Romance', 'Romance'), ('Science fiction', 'Science fiction'), ('Thriller', 'Thriller'), ('Other', 'Other')], default='Other', help_text='Select the genre of the book.', max_length=100, verbose_name='Book genre')),
                ('publisher', models.CharField(blank=True, help_text='Enter the name of the publisher.', max_length=100, verbose_name='Book publisher')),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone', models.CharField(blank=True, help_text="Enter the User's phone number.", max_length=12, validators=[Library__main.models.phoneValidator], verbose_name='Phone number')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
